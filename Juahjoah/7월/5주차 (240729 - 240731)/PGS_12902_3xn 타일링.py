def solution(n):
    # n이 홀수인 경우 타일로 채울 수 없으므로 0을 반환
    if n % 2 != 0:
        return 0

    # 모듈러 연산을 위한 값
    mod = 1000000007
    # DP 배열 초기화
    dp = [0] * (n + 1)
    # 기본 경우 초기화
    dp[0] = 1  # 2x0 크기의 직사각형을 채우는 방법은 1가지 (아무것도 안 채우는 경우)
    dp[2] = 3  # 2x2 크기의 직사각형을 채우는 방법은 3가지

    # 4부터 n까지의 짝수에 대해 DP 값 계산
    for i in range(4, n + 1, 2):
        # 기본 타일링 방법: 2x(i-2) 크기의 직사각형에 2x2 타일을 추가하는 경우
        dp[i] = dp[i - 2] * 3
        # 추가적인 타일링 방법: 더 큰 타일을 추가하는 경우
        for j in range(4, i + 1, 2):
            dp[i] += dp[i - j] * 2
        # 모듈러 연산으로 큰 숫자를 다루기 쉽게 함
        dp[i] %= mod

    # 최종적으로 2xn 크기의 직사각형을 채우는 방법의 수를 반환
    return dp[n]
